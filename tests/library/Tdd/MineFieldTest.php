<?php

namespace Tdd;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-28 at 07:38:23.
 */
class MineFieldTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var MineField
     */
    protected $mineField;

    /**
     * @var string
     */
    protected $mapData;

    /**
     * @var array
     */
    protected $map;

    protected function setUp()
    {
        $this->mapData = <<<'EOT'
3 4
*...
..*.
....
EOT;

        $this->map = array(
            2 => array('*', '.', '.', '.'),
            1 => array('.', '.', '*', '.'),
            0 => array('.', '.', '.', '.')
        );

		$this->mineField = new MineField($this->mapData);
    }

    protected function tearDown()
    {
        $this->mapData = null;
		$this->map = null;
		$this->mineField = null;
    }

	public function testGetHintField()
	{
		$expected = <<<'EOT'
*211
12*1
0111
EOT;
		$this->assertEquals($expected, $this->mineField->getHintField());
	}

    public function testGetMap()
    {
        $this->assertEquals($this->map, $this->mineField->getMap());
    }

	public function testGetRows()
	{
		$this->assertEquals(3, $this->mineField->getRows());
	}

	public function testGetColumns()
	{
		$this->assertEquals(4, $this->mineField->getColumns());
	}

	/**
	 * @dataProvider adjacentNodesDataProvider
	 */
	public function testFindAdjacentNodes($x, $y, $nodeList)
	{
		$this->assertEquals($nodeList, $this->mineField->findAdjacentNodes($x, $y));
	}

	public function adjacentNodesDataProvider()
	{
		return array(
			array(0, 0, array(
				'north' => array('x' => 0, 'y' => 1),
				'north-east' => array('x' => 1, 'y' => 1),
				'east' => array('x' => 1, 'y' => 0)
			)),
			array(3, 2, array(
				'south' => array('x' => 3, 'y' => 1),
				'south-west' => array('x' => 2, 'y' => 1),
				'west' => array('x' => 2, 'y' => 2)
			)),
			array(1, 1, array(
				'north' => array('x' => 1, 'y' => 2),	
				'north-east' => array('x' => 2, 'y' => 2),	
				'east' => array('x' => 2, 'y' => 1),	
				'south-east' => array('x' => 2, 'y' => 0),	
				'south' => array('x' => 1, 'y' => 0),	
				'south-west' => array('x' => 0, 'y' => 0),	
				'west' => array('x' => 0, 'y' => 1),	
				'north-west' => array('x' => 0, 'y' => 2),	
			))
		);
	}

	public function testFindAdjacentNodesInvalidNodeThrowsException()
	{
		$this->setExpectedException('\Exception', "'12, 22' is not a valid set of coordinates");
		$this->mineField->findAdjacentNodes(12, 22);
	}

	public function testIsValidNode()
	{
		$this->assertTrue($this->mineField->isValidNode(array('x' => 0, 'y' => 0)));
		$this->assertTrue($this->mineField->isValidNode(array('x' => 1, 'y' => 1)));
		$this->assertTrue($this->mineField->isValidNode(array('x' => 3, 'y' => 2)));


		$this->assertFalse($this->mineField->isValidNode(array('x' => -1, 'y' => 7)));
		$this->assertFalse($this->mineField->isValidNode(array('x' => 6, 'y' => 5)));
	}

}
