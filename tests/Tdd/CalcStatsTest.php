<?php

namespace Tdd\Test;

use Tdd\CalcStats;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-26 at 11:19:39.
 */
class CalcStatsTest extends \PHPUnit_Framework_TestCase
{
    public function testObjectCreation()
    {
        new CalcStats(array(1, 2, 3));
    }

    public static function calcStatsProvider()
    {
        // stats, min, max, count, average
        return array(
            array(new CalcStats(array(6, 9, 15, -2, 92, 11)), -2, 92, 6, 21.833333),
            array(new CalcStats(array(1, 3)), 1, 3, 2, 2),
            array(new CalcStats(array(0, 0, 0, 0, 0)), 0, 0, 5, 0),
        );
    }

    public function testEmptySequenceThrowsException()
    {
        $this->setExpectedException('\Exception', '$sequence array must contain at least two elements');
        new CalcStats(array());
    }
    
    public function testSequenceWithSingleElementThrowsException()
    {
        $this->setExpectedException('\Exception', '$sequence array must contain at least two elements');
        new CalcStats(array(1));
    }

    /**
     * @dataProvider calcStatsProvider
     */
    public function testGetMinimumValue(CalcStats $stats, $min, $max, $count, $average)
    {
        $this->assertEquals($min, $stats->getMinimumValue());
    }

    /**
     * @dataProvider calcStatsProvider
     */
    public function testGetMaximumValue(CalcStats $stats, $min, $max, $count, $average)
    {
        $this->assertEquals($max, $stats->getMaximumValue());
    }

    /**
     * @dataProvider calcStatsProvider
     */
    public function testCountElements(CalcStats $stats, $min, $max, $count, $average)
    {
        $this->assertEquals($count, $stats->countElements());
    }

    /**
     * @dataProvider calcStatsProvider
     */
    public function testGetAverageValue(CalcStats $stats, $min, $max, $count, $average)
    {
        $this->assertEquals($average, $stats->getAverageValue());
    }
}
